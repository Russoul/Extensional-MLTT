
‚Ñ§ type

(x : ‚Ñï) ‚ä¶ (-x : ‚Ñ§)

(x : ‚Ñï) ‚ä¶ (+x : ‚Ñ§)

-0 = +0 : ‚Ñ§

(x : ‚Ñ§) ‚ä¶ A type
(x : ‚Ñï) ‚ä¶ n : A(-x)
(x : ‚Ñï) ‚ä¶ p : A(+x)
n(-0) = p(+0) : A(-0)
-------------------------------
(x : ‚Ñ§) ‚ä¶ ‚Ñ§-elim x.n x.p : A(x)

(x : ‚Ñï) ‚ä¶ (‚Ñ§-elim x.n x.p)(-x) = n : A(-x)
(x : ‚Ñï) ‚ä¶ (‚Ñ§-elim x.n x.p)(+x) = p : A(+x)


//‚Ñ§-increment
(x : ‚Ñ§) ‚ä¶ (‚Üëx : ‚Ñ§)
‚àé
//By induction on x
* (x : ‚Ñï) ‚ä¶ ‚Üë(-x) : ‚Ñ§
  //By case-splitting on x
  * ‚Üë(-0) ‚âî +1 : ‚Ñ§
  * (x : ‚Ñï) ‚ä¶ ‚Üë(-(S x)) ‚âî -x : ‚Ñ§
* (x : ‚Ñï) ‚ä¶ ‚Üë(+x) ‚âî +(S x) : ‚Ñ§
* ‚Üë(-0) ‚â° ‚Üë(+0)
  +1 ‚â° +1
  //Trivial ‚àé

//‚Ñ§-decrement
(x : ‚Ñ§) ‚ä¶ (‚Üìx : ‚Ñ§)
‚àé
//By induction on x
* (x : ‚Ñï) ‚ä¶ (‚Üì(-x) ‚âî -(S x) : ‚Ñ§)
* (x : ‚Ñï) ‚ä¶ (‚Üì(+x) : ‚Ñ§)
  //By case-splitting on x
  * (‚Üì(+0) ‚âî -1 : ‚Ñ§)
  * (x : ‚Ñï) ‚ä¶ (‚Üì(+(S x)) ‚âî +x : ‚Ñ§)
* ‚Üì(-0) ‚â° ‚Üì(+0)
  -1 ‚â° -1
  //Trivial ‚àé

(x y : ‚Ñ§) ‚ä¶ x ~ y
‚àé
//By induction on x
* (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ -x ~ y
  //By induction on y
  * (x y : ‚Ñï) ‚ä¶ (-x ~ -y) := (x ~ y)
  * (x y : ‚Ñï) ‚ä¶ -x ~ +y := (x ‚â° 0) ‚®Ø (y ‚â° 0)
  * (x : ‚Ñï) ‚ä¶ (-x ~ -0) ‚â° (-x ~ +0)
    //By definition
    (x : ‚Ñï) ‚ä¶ (x ~ 0) ‚â° (x ‚â° 0 ‚®Ø 0 ‚â° 0)
    //By (0 ‚â° 0) ‚â° ùüô
    (x : ‚Ñï) ‚ä¶ (x ~ 0) ‚â° (x ‚â° 0 ‚®Ø ùüô)
    //By ùüô right unit
    (x : ‚Ñï) ‚ä¶ (x ~ 0) ‚â° (x ‚â° 0)
    //By ‚Ñï‚Åº-ext
* (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ +x ~ y
  //By induction on y
  * (x y : ‚Ñï) ‚ä¶ (+x ~ -y) ‚âî (x ‚â° 0) ‚®Ø (y ‚â° 0)
  * (x y : ‚Ñï) ‚ä¶ (+x ~ +y) ‚âî (x ‚â° y)
  * (x : ‚Ñï) ‚ä¶ (+x ~ -0) ‚â° (+x ~ +0)
    //By definition
    (x : ‚Ñï) ‚ä¶ ((x ~ 0) ‚®Ø (0 ~ 0)) ‚â° (x ~ 0)
    //True
* (y : ‚Ñ§) ‚ä¶ (-0 ~ y) ‚â° (+0 ~ y)
  //By induction on y
  * (y : ‚Ñï) ‚ä¶ (0 ~ y) ‚â° (0 ~ 0) ‚®Ø (y ~ 0)
    //True
  * (y : ‚Ñï) ‚ä¶ ((0 ~ 0) ‚®Ø (y ~ 0)) ‚â° (0 ~ y)
    //True
  * ((-0 ~ -0) ‚â° (+0 ~ -0)) ‚â° ((-0 ~ +0) ‚â° (+0 ~ +0))
    //True ‚àé

//TODO: show that x ~‚Ñ§ x is reflexive

(x : ‚Ñ§) ‚ä¶ |x| : ‚Ñ§
‚àé
//By induction on x
* (x : ‚Ñï) ‚ä¶ |+x| ‚âî +x : ‚Ñ§
* (x : ‚Ñï) ‚ä¶ |-x| ‚âî +x : ‚Ñ§
* |-0| = |+0| : ‚Ñ§
  //By definition
  +0 = +0 : ‚Ñ§
  //Reflexive ‚àé

(x : ‚Ñ§) ‚ä¶ trunc(x) : ‚Ñï
          trunc(-x) ‚âî x
          trunc(+x) ‚âî x
          trunc(-0) = 0 = trunc(+0) ‚àé

(x y : ‚Ñï) ‚ä¶ (-x ‚â° -y) ‚â° (x ‚â° y)
‚àé
//By prop. extensionality
* (-x ‚â° -y) ‚Üí (x ‚â° y)
  //By applying trunc to both sides
* (x ‚â° y) ‚Üí (-x ‚â° -y)
  //By applying (-) to both sides ‚àé

(x y : ‚Ñï) ‚ä¶ (+x ‚â° +y) ‚â° (x ‚â° y)
‚àé
//By prop. extensionality
* (+x ‚â° +y) ‚Üí (x ‚â° y)
  //By applying trunc to both sides
* (x ‚â° y) ‚Üí (+x ‚â° +y)
  //By applying (+) to both sides ‚àé

(x y : ‚Ñ§) ‚ä¶ (x ~ y) ‚â° (x ‚â° y)
‚àé
//By prop. extensionality it's enough to write
* (x y : ‚Ñ§) ‚ä¶ (x ~ y) ‚Üí (x ‚â° y)
  //By induction on x
  * (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ (-x ~ y) ‚Üí (-x ‚â° y)
    //By induction on y
    * (x y : ‚Ñï) ‚ä¶ (-x ~ -y) ‚Üí (-x ‚â° -y)
      //By definition
      (x y : ‚Ñï) ‚ä¶ (x ~ y) ‚Üí (-x ‚â° -y)
      //(-x ‚â° -y) ‚â° (x ‚â° y)
      (x y : ‚Ñï) ‚ä¶ (x ~ y) ‚Üí (x ‚â° y)
      //By characterisation of equality in ‚Ñï
    * (x y : ‚Ñï) ‚ä¶ (-x ~ +y) ‚Üí (-x ‚â° +y)
      //By definition
      (x y : ‚Ñï) ‚ä¶ ((x ‚â° 0) ‚®Ø (y ‚â° 0)) ‚Üí (-x ‚â° +y)
      //By contracting x and y
      -0 ‚â° +0
      //By definition of ‚Ñ§
  * (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ (+x ~ y) ‚Üí (+x ‚â° y)
    //By induction on y
    * (x y : ‚Ñï) ‚ä¶ (+x ~ -y) ‚Üí (+x ‚â° -y)
      //By definition
      (x y : ‚Ñï) ‚ä¶ ((x ‚â° 0) ‚®Ø (y ‚â° 0)) ‚Üí (+x ‚â° -y)
      //By contracting x and y
      (+0 ‚â° -0)
      //By definition of ‚Ñ§
    * (x y : ‚Ñï) ‚ä¶ (+x ~ +y) ‚Üí (+x ‚â° +y)
      //By definition
      (x y : ‚Ñï) ‚ä¶ (x ~ y) ‚Üí (+x ‚â° +y)
      //By (+x ‚â° +y) ‚â° (x ‚â° y)
      (x y : ‚Ñï) ‚ä¶ (x ~ y) ‚Üí (x ‚â° y)
      //By characterisation of equality in ‚Ñï
  //Third case is trivial because the target is a mere proposition
* (x y : ‚Ñ§) ‚ä¶ (x ‚â° y) ‚Üí (x ~ y)
  //Contract x
  (x : ‚Ñ§) ‚ä¶ (x ~ x)
  //By reflexivity of ~‚Ñ§ ‚àé

//Define multiplication
(x y : ‚Ñ§) ‚ä¶ (x * y : ‚Ñ§)
‚àé
//By induction on x
* (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ ((-x) * y : ‚Ñ§)
  //By induction on y
  * (x y : ‚Ñï) ‚ä¶ ((-x) * (-y) ‚âî +(x * y) : ‚Ñ§)
  * (x y : ‚Ñï) ‚ä¶ ((-x) * (+y) ‚âî -(x * y) : ‚Ñ§)
  * (x : ‚Ñï) ‚ä¶ ((-x) * (-0)) ‚â° ((-x) * (+0))
    //By definition
    (x : ‚Ñï) ‚ä¶ +(x * 0) ‚â° (-(x * 0))
    //By 0 right multiplicative annihilator
    (x : ‚Ñï) ‚ä¶ +0 ‚â° -0
    //By definition of ‚Ñ§
* (x : ‚Ñï) (y : ‚Ñ§) ‚ä¶ (-x * y : ‚Ñ§)
  //By induction on y
  * (x y : ‚Ñï) ‚ä¶ ((-x) * (-y) ‚âî +(x * y) : ‚Ñ§)
  * (x y : ‚Ñï) ‚ä¶ ((-x) * (+y) ‚âî -(x * y) : ‚Ñ§)
  * (x : ‚Ñï) ‚ä¶ ((-x) * (-0)) ‚â° ((-x) * (+0))
    //By definition
    (x : ‚Ñï) ‚ä¶ +(x * 0) ‚â° -(x * 0)
    //By 0 right multiplicative annihilator
    (x : ‚Ñï) ‚ä¶ +0 ‚â° -0
    //By definition of ‚Ñ§
* (y : ‚Ñ§) ‚ä¶ ((-0) * y ‚â° (+0) * y)
  //By induction on y
   * (y : ‚Ñï) ‚ä¶ ((-0) * (-y) ‚â° (+0) * (-y))
     //By definition
     (y : ‚Ñï) ‚ä¶ (+(0 * y) ‚â° -(0 * y))
     //By 0 left multiplicative annihilator
     (y : ‚Ñï) ‚ä¶ (+0 ‚â° -0)
     //By definition of ‚Ñ§
   * (y : ‚Ñï) ‚ä¶ ((-0) * (+y) ‚â° (+0) * (+y))
     //By definition
     (y : ‚Ñï) ‚ä¶ (-(0 * y) ‚â° +(0 * y))
     //By 0 left multiplicative annihilator
     (y : ‚Ñï) ‚ä¶ (-0 ‚â° +0)
     //By definition of ‚Ñ§ ‚àé


//+1 is left multiplicative unit
(x : ‚Ñ§) ‚ä¶ +1 * x ‚â° x
‚àé
//by induction on x
* (x : ‚Ñï) ‚ä¶ +1 * (-x) ‚â° (-x)
  //By definition
  (x : ‚Ñï) ‚ä¶ -(1 * x) ‚â° -x
  //By 1 is left multiplicative unit
  (x : ‚Ñï) ‚ä¶ -x ‚â° -x
  //By reflexivity
* (x : ‚Ñï) ‚ä¶ +(1 * x) ‚â° +x
  //By 1 is left multiplicative unit
  (x : ‚Ñï) ‚ä¶ +x ‚â° +x
  //By reflexivity ‚àé

//TODO: +1 is right multiplicative unit
(x : ‚Ñ§) ‚ä¶ x * (+1) ‚â° x

//+0 is left annihilator
(x : ‚Ñ§) ‚ä¶ +0 * x ‚â° +0
‚àé
//By induction on x
* (x : ‚Ñï) ‚ä¶ +0 * (-x) ‚â° +0
  //By definition
  (x : ‚Ñï) ‚ä¶ -(0 * x) ‚â° +0
  //By 0 left multiplicative annihilator
  (x : ‚Ñï) ‚ä¶ -0 ‚â° +0
  //By definition of ‚Ñ§
* (x : ‚Ñï) ‚ä¶ +0 * (-x) ‚â° +0
  //By definition
  (x : ‚Ñï) ‚ä¶ -(0 * x) ‚â° +0
  //By 0 left multiplicative annihilator
  (x : ‚Ñï) ‚ä¶ -0 ‚â° +0
  //By definition of ‚Ñ§ ‚àé

//TODO: +0 is right multiplicative annihilator
(x : ‚Ñ§) ‚ä¶ x * (+0) ‚â° +0


(a b : ‚Ñ§) ‚ä¶ ((a ‚â¢ +0) ‚®Ø (b ‚â¢ +0)) ‚â° (a * b ‚â¢ +0)
‚àé
//By induction on a
* (a : ‚Ñï) (b : ‚Ñ§) ‚ä¶ ((+a ‚â¢ +0) ‚®Ø (b ‚â¢ +0)) ‚â° (+a * b ‚â¢ +0)
  //By induction on b
  * (a b : ‚Ñï) ‚ä¶ ((+a ‚â¢ +0) ‚®Ø (-b ‚â¢ +0)) ‚â° (+a * -b ‚â¢ +0)
    (a b : ‚Ñï) ‚ä¶ (((a ~ 0) ‚Üí ùüò) ‚®Ø ((b ~ 0) ‚®Ø (0 ~ 0) ‚Üí ùüò)) ‚â° ((-(a * b) ~ +0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ ((a ‚â¢ 0) ‚®Ø (b ‚â¢ 0)) ‚â° (((a * b) ~ 0) ‚®Ø (0 ~ 0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ ((a ‚â¢ 0) ‚®Ø (b ‚â¢ 0)) ‚â° (((a * b) ~ 0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ ((a ‚â¢ 0) ‚®Ø (b ‚â¢ 0)) ‚â° ((a * b) ‚â¢ 0)
    //True by the lemma in Nat.txt
  * (a b : ‚Ñï) ‚ä¶ ((+a ‚â¢ +0) ‚®Ø (+b ‚â¢ +0)) ‚â° (+a * +b ‚â¢ +0)
    (a b : ‚Ñï) ‚ä¶ (((+a ‚â° +0) ‚Üí ùüò) ‚®Ø ((+b ‚â° +0) ‚Üí ùüò)) ‚â° ((+(a * b) ‚â° +0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ (((+a ~ +0) ‚Üí ùüò) ‚®Ø ((+b ~ +0) ‚Üí ùüò)) ‚â° ((+(a * b) ~ +0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ (((a ~ 0) ‚Üí ùüò) ‚®Ø ((b ~ 0) ‚Üí ùüò)) ‚â° (((a * b) ~ 0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ (((a ‚â° 0) ‚Üí ùüò) ‚®Ø ((b ‚â° 0) ‚Üí ùüò)) ‚â° (((a * b) ‚â° 0) ‚Üí ùüò)
    (a b : ‚Ñï) ‚ä¶ ((a ‚â¢ 0) ‚®Ø (b ‚â¢ 0)) ‚â° ((a * b) ‚â¢ 0)
    //True by the lemma in Nat.txt
* (a : ‚Ñï) (b : ‚Ñ§) ‚ä¶ ((-a ‚â¢ +0) ‚®Ø (b ‚â¢ +0)) ‚â° (-a * b ‚â¢ +0)
  //Same ‚àé

(a b : ‚Ñ§) ‚ä¶ a ‚â§ b : Œ©
‚àé
//By induction on a
* (a : ‚Ñï) (b : ‚Ñ§) ‚ä¶ +a ‚â§ b
  //By induction on b
  * (a b : ‚Ñï) ‚ä¶ (+a ‚â§ +b) ‚âî (a ‚â§ b)
  * (a b : ‚Ñï) ‚ä¶ (+a ‚â§ -b) ‚âî (a ‚â° 0) ‚®Ø (b ‚â° 0)
* (a : ‚Ñï) (b : ‚Ñ§) ‚ä¶ -a ‚â§ b
  //By induction on b
  * (a b : ‚Ñï) ‚ä¶ (-a ‚â§ -b) ‚âî (a ‚â• b)
  * (a b : ‚Ñï) ‚ä¶ (-a ‚â§ +b) ‚âî ùüô ‚àé

(a : ‚Ñ§) ‚ä¶ a ‚â§ a
‚àé
//By induction on a
* (a : ‚Ñï) ‚ä¶ -a ‚â§ -a
  (a : ‚Ñï) ‚ä¶ a ‚â• a
  (a : ‚Ñï) ‚ä¶ a ‚â§ a
  //By reflexivity
* (a : ‚Ñï) ‚ä¶ +a ‚â§ +a
  (a : ‚Ñï) ‚ä¶ a ‚â§ a
  //By reflexivity ‚àé

(a b c : ‚Ñ§) ‚ä¶ a ‚â§ b ‚Üí b ‚â§ c ‚Üí a ‚â§ c
‚àé
* (a b c : ‚Ñï) ‚ä¶ -a ‚â§ -b ‚Üí -b ‚â§ -c ‚Üí -a ‚â§ -c
  (a b c : ‚Ñï) ‚ä¶ (a ‚â• b) ‚Üí (b ‚â• c) ‚Üí (a ‚â• c)
  (a b c : ‚Ñï) ‚ä¶ (b ‚â§ a) ‚Üí (c ‚â§ b) ‚Üí (c ‚â§ a)
  (a b c : ‚Ñï) ‚ä¶ (c ‚â§ b) ‚Üí (b ‚â§ a) ‚Üí (c ‚â§ a)
  //By transivity of (‚â§) in ‚Ñï
* (a b c : ‚Ñï) ‚ä¶ -a ‚â§ -b ‚Üí -b ‚â§ +c ‚Üí -a ‚â§ +c
  (a b c : ‚Ñï) ‚ä¶ a ‚â• b ‚Üí ùüô ‚Üí ùüô
  //Trivial
* (a b c : ‚Ñï) ‚ä¶ -a ‚â§ +b ‚Üí +b ‚â§ -c ‚Üí -a ‚â§ -c
  (a b c : ‚Ñï) ‚ä¶ ùüô ‚Üí (b ‚â° 0) ‚®Ø (c ‚â° 0) ‚Üí a ‚â• c
  (a : ‚Ñï) ‚ä¶ a ‚â• 0
  (a : ‚Ñï) ‚ä¶ 0 ‚â§ a
  //By 0-initial-‚â§
* (a b c : ‚Ñï) ‚ä¶ -a ‚â§ +b ‚Üí +b ‚â§ +c ‚Üí -a ‚â§ +c
  (a b c : ‚Ñï) ‚ä¶ ùüô ‚Üí b ‚â§ c ‚Üí ùüô
  //Trivial
* (a b c : ‚Ñï) ‚ä¶ +a ‚â§ -b ‚Üí -b ‚â§ -c ‚Üí +a ‚â§ -c
  (a b c : ‚Ñï) ‚ä¶ (a ‚â° 0 ‚®Ø b ‚â° 0) ‚Üí b ‚â• c ‚Üí (a ‚â° 0) ‚®Ø (c ‚â° 0)
  (c : ‚Ñï) ‚ä¶ 0 ‚â• c ‚Üí (0 ‚â° 0) ‚®Ø (c ‚â° 0)
  (c : ‚Ñï) ‚ä¶ 0 ‚â• c ‚Üí (c ‚â° 0)
  (c : ‚Ñï) ‚ä¶ c ‚â§ 0 ‚Üí (c ‚â° 0)
  //By 0-smallest
* (a b c : ‚Ñï) ‚ä¶ +a ‚â§ -b ‚Üí -b ‚â§ +c ‚Üí +a ‚â§ +c
  (a b c : ‚Ñï) ‚ä¶ a ‚â° 0 ‚®Ø b ‚â° 0 ‚Üí ùüô ‚Üí a ‚â§ c
  (c : ‚Ñï) ‚ä¶ 0 ‚â§ c
  //By 0-initial-‚â§
* (a b c : ‚Ñï) ‚ä¶ +a ‚â§ +b ‚Üí +b ‚â§ -c ‚Üí +a ‚â§ -c
  (a b c : ‚Ñï) ‚ä¶ a ‚â§ b ‚Üí b ‚â° 0 ‚®Ø c ‚â° 0 ‚Üí a ‚â° 0 ‚®Ø c ‚â° 0
  (a : ‚Ñï) ‚ä¶ a ‚â§ 0 ‚Üí a ‚â° 0 ‚®Ø 0 ‚â° 0
  (a : ‚Ñï) ‚ä¶ a ‚â§ 0 ‚Üí a ‚â° 0
  //By 0-smallest
* (a b c : ‚Ñï) ‚ä¶ +a ‚â§ +b ‚Üí +b ‚â§ +c ‚Üí +a ‚â§ +c
  (a b c : ‚Ñï) ‚ä¶ a ‚â§ b ‚Üí b ‚â§ c ‚Üí a ‚â§ c
  //By transitivity of (‚â§) in ‚Ñï
