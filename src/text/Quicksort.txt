
data (<) : List A → List A → 𝕌 where
   Here : xs < (x :: xs)
   There : xs < ys → xs < (y :: ys)

data (≤) : List A → List A → 𝕌 where
   Refl : xs ≤ xs
   Keep : xs ≤ ys → x :: xs ≤ x :: ys
   Drop : xs ≤ ys → xs ≤ y :: ys

|·| : List A → ℕ
|[]| = 0
|x :: xs| = 1 + |xs|

filter : (A → Bool) → List A → List A
filter f [] = []
filter f (x :: xs) with f x
 filter f (x :: xs) | True = x :: filter f xs
 filter f (x :: xs) | False = filter f xs

filter-≤ : (xs : List) → filter f xs ≤ xs
filter-≤ [] = Refl
filter-≤ (x :: xs) with (f x)
 filter-≤ (x :: xs) | True = Keep (filter-≤ xs)
 filter-≤ (x :: xs) | False = Drop (filter-≤ xs)


well-foundedH : (P : List A → 𝕌)
                (f : (xs : List A) → ((ks : List A) → |ks| < |xs| → P ks) → P xs)
                →
                (xs ks : List A) → (|ks| < |xs|) → P ks
well-foundedH P f [] ks contra impossible
  //|xs| = |ks|
well-foundedH P f (x :: xs) ks Here = ? : P ks
well-foundedH P f (x :: xs) ks (s : |ks| < 1 + xs) = ?

well-founded : (P : List A → 𝕌)
               (f : (xs : List A) → ((ks : List A) → ks < xs → P ks) → P xs)
               →
               ((xs : List A) → P xs)
well-founded P f xs = well-foundedH P f (x :: xs) xs Here



quicksort : List A → List A
quicksort [] = []
quicksort (x :: xs) =
  quicksort (filter (≤ x) xs) ++ [x] ++ quicksort (filter (x ≤) xs)


