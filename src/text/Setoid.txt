//Let's take a look at setoids inside extensional MLTT

((x y : A) ⊦ x ~ y : 𝕌) ⊦ Equiv(~) ≔ ((x : A) ⊦ Refl(x) : x ~ x)
                                   ⨯ ((p : x ~ y) ⊦ p⁻¹ : y ~ x)
                                   ⨯ (((p : x ~ y) (q : y ~ z) ⊦ p ∙ q : x ~ z)): 𝕌


//We'll use (~) for equivalence relations going forth

//Setoid is a pair: (A, ~)

//Setoid homomorphism (A, ~) ⇒ (B, ~)
//is
(f : A → B) ⨯ ((x ~ y) → (f x ~ f y))

//Take the usual definition of natural numbers
//Take the usual observational equality relation on them
//Together they form a setoid (ℕ, ~)


Given
(A, ~) : Setoid
(B, ~) : Setoid
---------------
We can form a new equivalence relation:
~ : (A ⨯ B) → (A ⨯ B) → 𝕌
(a₀, b₀) ~ (a₁, b₁) ≔ (a₀ ~ a₁) ⨯ (b₀ ~ b₁)
hence
(A ⨯ B, ~) : Setoid

Given
(A, ~) : Setoid
(B, ~) : Setoid
---------------
We can form a new equivalence relation:
(~) : (A → B) → (A → B) → 𝕌
f ~ g ≔ {a₀ a₁} (a₀ ~ a₁) → (f a₀ ~ f a₁)
hence
(A → B, ~) : Setoid

(A, ~) : Setoid
--------------
Contr(A) ≔ (c : A) ⨯ ((x : A) → x ~ c)

f : (A, ~) ⇒ (B, ~)
b : B
---------------------------------
Fibre(f, b) ≔ (x : A) ⨯ (f x ~ b)

//We can define
(~) : ((A, ~) ⇒ (B, ~)) → ((A, ~) ⇒ (B, ~)) → 𝕌
(f, α) ~ (g, β) ≔ (f ~ g)


                       H x
   x          f x  - - - - - - - g x
   |           |                  |
   | p         | f p              | g p
   |           |                  |
   y          f y  - - - - - - - g y

E₀ : ℤ ≃ ℤ
E₁ : ℤ ≃ ℤ

E₀ = E₁

                       (+3)
   ℕ           ℤ - - - - - - - -  ℤ
   |           |                  |
   | p         | (+2)             | (+1)
   |           |                  |
   ℕ           ℤ  - - - - - - - - ℤ
                       (+4)

(+1) ∘ (+2) ~ (+3)
but
(+1) ∘ (+2) ≁ (+4)

This example shows us that if one has proof-relevant equivalence relation then
one also needs proof-relevant equivalence relelation on that relation.

//Hence
//((A, ~) ⇒ (B, ~), ~) : Setoid

f : (A, ~) ⇒ (B, ~)
-----------------------------------------------
l-inv(f) ≔ (g : (B, ~) ⇒ (A, ~)) ⨯ (g ∘ f) ~ id

f : (A, ~) ⇒ (B, ~)
-------------------
r-inv(f) ≔ (g : (B, ~) ⇒ (A, ~)) ⨯ (f ∘ g) ~ id

//We can define
~ : Setoid → Setoid → 𝕌
(A, ~) ~ (B, ~) ≔ (f : (A, ~) ⇒ (B, ~)) ⨯ l-inv(f) ⨯ r-inv(g)

//Hence
(Setoid, ~) : Setoid

//Notation:
(f, α) : (A, ~) ⇒ (B, ~)
a : A
------------------------
(f, α) a ≔ f a : B

//Notation:
(f, α) : (A, ~) ⇒ (B, ~)
p : a₀ ~ a₁
----------------------------
(f, α) p ≔ α p : f a₀ ~ f a₁


//Notation:
A B : Setoid
P : A ~ B
a : A
------------------
(f, α) a = f a : B

//Notation:
(A, ~) : Setoid
--------------- (implicit coercion)
(A, ~) = A : 𝕌

B : (A, ~) ⇒ Setoid
a₀ a₁ : A
a : a₀ ~ a₁
---------------------------------
EquivOver(A, a) : B a₀ → B a₁ → 𝕌
EquivOver(A, a) b₀ b₁ ≔ B a b₀ ~ b₁

//Given
(A, ~) : Setoid
B : (A, ~) ⇒ Setoid
//We can form a new equivalence relation:
~ : ((x : A) ⨯ B x) → ((x : A) ⨯ B x) → 𝕌
(a₀, b₀ : B a₀) ~ (a₁, b₁ : B a₁) ≔ (a : a₀ ~ a₁) ⨯ EquivOver(A, a) b₀ b₁
//Hence
(((x : A) ⨯ B x), ~) : Setoid

//Given
B : (A, ~) ⇒ Setoid
//We can form a new equivalence relation:
~ : ((x : A) → B x) → ((x : A) → B x) → 𝕌
f ~ g ≔ ∀ {a₀ a₁ : A} (a : a₀ ~ a₁) → EquivOver(A, a) (f a₀) (f a₁)
//Hence
(((x : A) → B x), ~) : Setoid


(~) : List A → List A → 𝕌
[] ~ [] ≔ 𝟙
[] ~ (_ :: _) ≔ 𝟘
(_ :: _) ~ [] ≔ 𝟘
(a :: as) ~ (b :: bs) ≔ (a ~ b) ⨯ (as ~ bs)

//Can we show that List : 𝕌 → 𝕌
//is a setoid homomorphism?
//It's enough to show that
A B : 𝕌
α : A ≃ B → List A ≃ List B
//So it's enough to show:
A B : 𝕌
E : A ≃ B
----------------------
α.π₁ : A ≃ B → (List A ⇒ List B)


α.π₁.U : List A → List B
α.π₁.U [] = []
α.π₁.U (x :: xs) = E x :: α.U xs

α.π₁.cong : {xs ys : List A} (xs ~ ys) → α.U xs ~ α.U ys
α.π₁.cong {[]} {[]} () = ()
α.π₁.cong {[]} {_ :: _} contra = absurd contra
α.π₁.cong {_ :: _} {[]} contra = absurd contra
α.π₁.cong {a₀ :: as₀} {a₁ :: as₁} (a : a₀ ~ a₁, as : as₀ ~ as₁) = (E a, α.cong as) : (E a₀ :: α.U as₀) ~ (E a₁ :: α.U as₁)
                                                                                     =
                                                                                     (E a₀ ~ E₁ a₁) ⨯ (α.U as₀ ~ α.U as₁)

//now we need to show
β : A ≃ B → (List B ⇒ List A)

...

Hence It's quite easy to show that List is a setoid homomorphism


(A ⨯ B) ~ (B ⨯ A)

swap (a, b) = (b, a)

swap (p : a₀ ~ a₁, q : b₀ ~ b₁) = (q, p) : (b₀ ~ b₁) ⨯ (a₁ ~ a₀)

swap ∘ swap ~ id

(a, b) : A ⨯ B

Refl : (a, b) ~ (a, b)
