//Logical equivalence
(A B : 𝕌) ⊦ (A ⇔ B) ≔ (A → B) ⨯ (B → A)

(A B : 𝕌) (propB : IsProp B) ⊦
  funIsProp : IsProp (A → B)
  funIsProp f g = fun-ext H : f ≡ g
    where
      (x : A) ⊦ H : f x ≡ g x ∈ B
                H = isPropB (f x) (g x)

(A B : 𝕌) (isPropA : IsProp A) (isPropA : IsProp b) ⊦
  iffIsProp : IsProp (A ⇔ B)
  iffIsProp (f₀, g₀) (f₁, g₁) = ⨯-ext H
   where
     H : (f₀ ≡ f₁) ⨯ (g₀ ≡ g₁)
     H.π₁ = funIsProp(A, B, isPropB) f₀ f₁
     H.π₂ = funIsProp(A, B, isPropA) g₀ g₁
