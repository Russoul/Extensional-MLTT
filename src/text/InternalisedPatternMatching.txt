//Lemma useful for internalised pattern-matching

(x : A) ⊦ P type
((x : A) ⨯ P) ≅ 𝟙
a₀ : A
a₁ : A
p₀ : P(a₀)
------------------
(a₀ ≡ a₁) ≅ P(a₁)

∎
=>) Assume e : a₀ ≡ a₁
    By equality reflection we have a₀ = a₁
    hence p₀ : P(a₁)
<=) The sigma type is equivalent to 𝟙 hence
    hence any two elements of it are equal
    hence we have:
    (a₀, p₀) ≡ (a₁, p₁)
    But via pair-extensionality we have
    a₀ ≡ a₁
><) any two elements of a₀ ≡ a₁ are equal due to UIP
<>) p₁ : P(a₁)
    p₀ : P(a₁)
    we need to show that (p₁ ≡ p₀)
    Due to the equivalence we have:
    (a₀, p₀) ≡ (a₁, p₁)
    Via pair-extensionality we have
    p₀ = p₁ ∎

//Justification of pattern-matching on two ℕ

(x y : ℕ) ⊦ A type

a₀₀ : A(Z/x, Z/y)
a₀₁ : (y : ℕ) → A(Z/x) → A(Z/x, S y/ y)
(x : ℕ) (h : (y : ℕ) → A) ⊦ a₁₀ : A (S x / x, 0 / y)
(x : ℕ) (h : (y : ℕ) → A) ⊦ a₁₀ : (y : ℕ) → A (S x / x) → A (S x / x, S y / y)

a₀ : (y : ℕ) → A(Z/x)                    }
a₀ Z = a₀₀                               } ≅ 𝟙
(y : ℕ) → a₀ (S y) = a₀₁ y (a₀ y)        }

(x : ℕ) (h : (y : ℕ) → A) ⊦
   a₁ : (y : ℕ) → A (S x / x)      }
   a₁ Z = a₁₀                      } ≅ 𝟙
   a₁ (S y) = a₁₀ y (a₁ y)         }

//Pick x ≔ x, h ≔ f x

   a₁ : (y : ℕ) → A (S x / x)                 }
   a₁ Z = a₁₀(f x / h)                        } ≅ 𝟙
   (y : ℕ) → a₁ (S y) = a₁₀(f x / h) y (a₁ y) }

f : (x y : ℕ) → A                    }
f Z ≡ a₀                             } ≅ 𝟙
(x : ℕ) → f (S x) ≡ a₁ (f x / h)     }

f Z y ≡ a₀
≅
f Z Z = a₀₀
(y : ℕ) → f Z (S y) = a₀₁ y (f Z y)

(x : ℕ) → f (S x) ≡ a₁ (f x / h)
≅
(x : ℕ) → f (S x) Z = a₁₀(f x / h)
          ⨯
          f (S x) (S y) = a₁₀(f x / h) y (f (S x) y)

And hence we have:


f : (x y : ℕ) → A                                       }
f Z Z = a₀₀                                             }
(y : ℕ) → f Z (S y) = a₀₁ y (f Z y)                     } ≅ 𝟙
(x : ℕ) → f (S x) Z = a₁₀(f x / h)                      }
(x y : ℕ) → f (S x) (S y) = a₁₀(f x / h) y (f (S x) y)  }






//Let's show that the head equation defines a unique function
head : Vect (S n) A → A
head (x :: xs) = x


?a₀ : (n : ℕ) → (0 ≡ S n) → A
?a₁ : (z : ℕ) → A → Vect z A → (h : (n : ℕ) → (z ≡ S n) → A) → (n : ℕ) → (S z ≡ S n) → A
----------------------------------------------------------------------------------------
head : (z : ℕ) → Vect z A → (n : ℕ) → (z ≡ S n) → A  }
head 0 [] = ?a₀                                      } ≅ 𝟙
head (S z) (x :: xs) = ?a₁ z x xs (head z xs)        }

Pick ?a₀ n contra ≔ absurd contra
     ?₁ z x xs h = x

Hence we have:

head : (z : ℕ) → Vect z A → (n : ℕ) → (z ≡ S n) → A  }
head 0 [] = n contra ↦ absurd contra                 } ≅ 𝟙
head (S z) (x :: xs) = n _ ↦ x                       }

//Note that:
 (n : ℕ) → (0 ≡ S n) → A
 ≅
 (n : ℕ) → 𝟘 → A
 ≅
 𝟙

//Hence
(head 0 [] = n contra ↦ absurd contra) ≅ 𝟙

//Hence we have:

𝟙

≅

head : (z : ℕ) → Vect z A → (n : ℕ) → (z ≡ S n) → A
head (S z) (x :: xs) = n _ ↦ x

≅

head : (n z : ℕ) → (z ≡ S n) → Vect z A → A
head n (S z) prf (x :: xs) = x

≅

head : (n : ℕ) → Vect (S n) A → A
head (S n) (x :: xs) = x





//Defines a unique function
f : (a₀ a₁ : A) (a : a₀ ≡ a₁) → B } ≅ 𝟙
f x x Refl ≡ ?p ∈ B(x, x, Refl)  }

∎
=>) Trivial
<=) f a₀ a₁ a = J A a₀ (a₁.a. B) ?p(a₀/x) a₁ a
    f x x Refl = J A x (a₁.a. B) ?p(a₀/x) x Refl = ?p(a₀/x) //By β-rule
<>) trivial
><) we have:
    f : (a₀ a₁ : A) (a : a₀ ≡ a₁) → B
    e : f x x Refl ≡ ?p ∈ B(x, x, Refl)

    we need to show that

    (f, e) = (a₀ a₁ a ↦ J A a₀ (a₁.a. B) ?p(a₀/x) a₁ a, _)

    It's enough to show that

    f a₀ a₁ a = J A a₀ (a₁.a. B) ?p(a₀/x) a₁ a

    Which is equivalent to

    f a₀ a₁ a = J A a₀ (a₁.a. B) (f a₀ a₀ Refl) a₁ a

    Which is true by the η-rule. ∎











  StreamF(X) = A * X



              (h, t)
     X  - - - - - - - > A ⨯ X
     |                     |
     |                     |
  𝜈  |                     | A ⨯ 𝜈
     |                     |
     |                     |
     v                     v
    Stream A - - - - -> A ⨯ Stream A
           (head, tail)


//Existence
(x : X) ⊦ (A ⨯ 𝜈) ((h, t) x) ≡ (head, tail) (𝜈 x) ∈ A ⨯ Stream A
≅
(x : X) ⊦ (h x, 𝜈 (t x)) ≡ (head (𝜈 x), tail (𝜈 x)) ∈ A ⨯ Stream A
≅
(x : X) ⊦ h x ≡ head (𝜈 x) ∈ A
(x : X) ⊦ 𝜈 (t x) ≡ tail (𝜈 x) ∈ Stream A

//Initiality
Given arbitrary
f : X → Stream A
such that the diagram commutes (replacing 𝜈 with f)
𝜈 ≡ f ∈ X → Stream A

//Pattern-matching:
?t : X → A
?h : X → X
-------------------------------
f : X → Stream A         }
(f x).head ≡ ?t          } ≅ 𝟙
(f x).tail ≡ f (?h x)    }


example:

zip : Stream A ⨯ Stream B → Stream (A ⨯ B)
(zip (xs, ys)).head = (xs.head, ys.head)
(zip (xs, ys)).tail = zip (xs.tail, ys.tail)

//Case-splitting on ℕ

f : ℕ → ℕ        }
f 0 = ?₀         } ≅ 𝟙
f (S x) = ?₁ x   }

∎ Special case of the general pattern-matching lemma, where ?₁ doesn't depend on the induction hypothesis ∎




//Nested ℕ-case justification

f : (x : ℕ) → A x   }
f 0 = ?₀            }
f 1 = ?₁            } ≅ 𝟙
f (2 + x) = ?₂ x    }

∎

// By case-splitting lemma we have:

?₀ : A 0
?₁ : (x : ℕ) → A (S x)
-----------------------------------
f : (x : ℕ) → A x             }
f 0 = ?₀                      } ≅ 𝟙
(x : ℕ) → f (1 + x) = ?₁ x    }

// Note that we have a canonical isomorphism:
E : ℕ ≅ 𝟙 + ℕ
//We can apply it to the domain of the Π-type of the second equation:
(x : ℕ) → f (1 + x) = ?₁ x
≅
(x : 𝟙 + ℕ) → f (1 + E⁻¹ x) = ?₁ (E⁻¹ x)
≅
(x : 𝟙) → f (1 + E⁻¹ (Left x)) = ?₁ (E⁻¹ (Left x))
⨯
(x : ℕ) → f (1 + E⁻¹ (Right x)) = ?₁ (E⁻¹ (Right x))
≅
f (1 + E⁻¹ (Left ())) = ?₁ (E⁻¹ (Left ()))
⨯
(x : ℕ) → f (1 + E⁻¹ (Right x)) = ?₁ (E⁻¹ (Right x))
≅
f (1 + 0) = ?₁ 0
⨯
(x : ℕ) → f (1 + (1 + x)) = ?₁ (1 + x)
≅
f 1 = ?₁ 0
⨯
(x : ℕ) → f (2 + x) = ?₁ (1 + x)

//hence we have:

?₀ : A 0
?₁ : (x : ℕ) → A (S x)
-----------------------------------
f : (x : ℕ) → A x                 }
f 0 = ?₀                          } ≅ 𝟙
f 1 = ?₁ 0                        }
(x : ℕ) → f (2 + x) = ?₁ (1 + x)  }

//Apply the same iso to the type of ?₁:
(x : ℕ) → A (S x)
≅
(x : 𝟙 + ℕ) → A (S (E⁻¹ x))
≅
(x : 𝟙) → A (S (E⁻¹ (Left x)))
⨯
(x : ℕ) → A (S (E⁻¹ (Right x)))
≅
A (S (E⁻¹ (Left ())))
⨯
(x : ℕ) → A (S (E⁻¹ (Right x)))
≅
A 1
⨯
(x : ℕ) → A (2 + x)

//Hence we have:

?₀ : A 0
?₁ : A 1 ⨯ ((x : ℕ) → A (2 + x))
-----------------------------------
f : (x : ℕ) → A x                    }
f 0 = ?₀                             } ≅ 𝟙
f 1 = ?₁.π₁                          }
(x : ℕ) → f (2 + x) = ?₁.π₂ x        }

//Flatten the sigma:

?₀ : A 0
?₁ : A 1
?₂ : (x : ℕ) → A (2 + x)
-----------------------------------
f : (x : ℕ) → A x                    }
f 0 = ?₀                             } ≅ 𝟙
f 1 = ?₁                             }
(x : ℕ) → f (2 + x) = ?₂ x           }

//QED ∎
