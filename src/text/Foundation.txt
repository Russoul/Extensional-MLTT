//////////// Type Theory: Extensional MLTT /////////////
We have:
 * Empty type: 𝟘
 * Unit type: 𝟙
 * Dependent product type: Π
 * Dependent sum type: Σ
 * Equality type: (≡) with reflection
 * Indexed quotient-inductive types
 * One universe (doesn't contain inductive types yet)

TODO:
 * inductive types in the universe
 * induction-induction
 * induction-recursion
 * co-inductive types
 * stronger universes


/////////////// Notes /////////////////

* Element relation is defined on types quotiented by the equivalence relation
* TODO: references


//////////// Presentation /////////////

//Context
Γ, Δ, Ξ ::= ε | Γ (x : A)

//Telescope
Γ, Δ, Ξ ::= ε | (x : A) Γ

//Substitution
σ, τ ::= · | σ, t | σ ∘ τ | ↑ | id

//Inductive schema
𝒦 ::= ε | 𝒦, ℓ : 𝒞 | 𝒦, 𝒞⁼ | 𝒦(σ)

//Inductive schema type
𝒜, 𝓑 ::= Π (x : A) 𝓑 | 𝒳(ē) | 𝒜(σ)

//Inductive schema element
𝓜, 𝒩 ::= λx.𝓜 | 𝓜 e | Intro ℓ ē 𝒩̅ | 𝓜(σ) | x

//Inductive schema context
ϴ ::= ε | ϴ 𝒜

//Inductive schema point-constructor
𝒞 ::= (Ξ, ξ.ϴ, ξ.I̅) | 𝒞(σ)

//Inductive schema equality-constructor
𝒞⁼ ::= (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜, ξ.θ.𝒩) | 𝒞(σ)

//Inductive schema elimination
𝛆 ::= ε | 𝛆, ℓ : ξ.η.ρ.e

//Type
A, B, C, T ::= 𝟘 | 𝟙 | 𝕌 | Π (x : A) B | Σ (x : A) B | (a₀ ≡ a₁ ∈ A) | El(a) | Ind Δ 𝒦 I̅ | A(σ)

//Element
a, b, c, t, f, e ::= 𝟘-elim t
                   | ()
                   | 𝟘
                   | 𝟙
                   | Π (x : a) b
                   | Σ (x : a) b
                   | (a₀ ≡ a₁ ∈ t)
                   | λx.f
                   | f e
                   | (a, b)
                   | t.π₁
                   | t.π₂
                   | Refl
                   | x
                   | Intro ℓ Δ 𝒦 ē₀ ē₁
                   | Elim Δ 𝒦 δ.h.A I̅ t 𝛆
                   | t(σ)

//Spine
ē, t̄, I̅ ::= · | ē e

//List
ē, t̄, I̅ ::= · | e ē

// data ℕ where
//   Z : ℕ
//   (x : ℕ) ⊦ S(x) : ℕ
//
// data ℤ where
//   (x : ℕ) ⊦ -x : ℤ
//   (x : ℕ) ⊦ +x : ℤ
//   -0 = +0 : ℤ
//
// inc : ℤ → ℤ
// inc (-0) = +1
// inc (-S(x)) = -x
// inc (+x) = +(S(x))
// inc (-0) = inc (+0) : ℤ
//    =          =
//    +1    =    +1
//
// (A : 𝕌) ⊦
//  data List where
//    [] : List
//    (x : A) (xs : List) ⊦ (x :: xs) : List
//
// (A : 𝕌) ⊦
//   data (n : ℕ) ⊦ Vect where
//     [] : Vect 0
//     (n : ℕ) (x : A) (xs : Vect n) ⊦ (x :: xs) : Vect S(n)
//
// (A : 𝕌) (a₀ : A) ⊦
//   data (x : A) ⊦ Eq where
//     Refl : Eq a₀
//
// A : 𝕌
// a₀ : A
// (x : A) (h : Eq A a₀ x) ⊦ C type
// r : C(a₀, Refl)
// a₁ : A
// a : Eq A a₀ a₁
// -------------------------------
// Eq-elim x.h.C r a₁ a : C(a₁, a)
// Eq-elim x.h.C r a₀ Refl = r
//
// e : Eq A a₀ a₁
// -----------------------------------------------
// Eq-elim (x.h. Eq A x a₀) Refl a₁ e : Eq A a₁ a₀
//
//
// (A : 𝕌) (R : A → A → 𝕌) ⊦
//   data A/R where
//     (x : A) ⊦ [x] : A/R
//     (x : A) (y : A) (r : El(R x y)) ⊦ [x] = [y] : A/R
//
// data ℕ₂ where
//  (x : ℕ) ⊦ [x] : ℕ₂
//  (x : ℕ) ⊦ [x] = [x + 2] : ℕ₂
//
// data ℕ∞ where
//   0 : ℕ∞
//   (x : ℕ) ⊦ S(x) : ℕ∞
//   ∞ : ℕ∞
//   S(∞) = ∞ : ℕ∞
//
//(f : X → A) (g : X → B) ⊦
//  data Pushout where
//    (x : A) ⊦ Left(x) : Pushout
//    (y : B) ⊦ Right(y) : Pushout
//    (x : X) ⊦ Left (f x) = Right (g x) : Pushout
//
// Induction-induction required below
//
// data (n : ℕ) ⊦ Even where
//    ZeroEven : Even 0
//    (o : Odd n) ⊦ Next : Even S(n)
//
// data (n : ℕ) ⊦ Odd where
//    OneOdd : Odd 1
//    (e : Even n) ⊦ Next : Odd S(n)
//
// (A : 𝕌) ⊦
//    data Poset where
//      (x : A) ⊦ Inj(x) : Poset
//      (x y : Poset) (x ≤ y) (y ≤ x) ⊦ x = y : Poset
//    data (x : Poset) (y : Poset) ⊦ x ≤ y where
//      Refl : x ≤ x
//      (x y z : Poset) (p : x ≤ y) (q : y ≤ z) ⊦ p ∙ q : x ≤ z
//


/////// Judgement forms /////////

Γ ⊦ Δ ᐅ 𝒦

Γ ⊦ Δ 𝒦 ᐅ 𝒞

Γ ctx

Γ ctx
---------
Γ ⊦ Δ tel

Γ ⊦ Δ₀ tel
Γ ⊦ Δ₁ tel
---------------
Γ ⊦ Δ₀ = Δ₁ tel

Γ ctx
----------
Γ ⊦ A type

Γ ⊦ A₀ type
Γ ⊦ A₁ type
----------------
Γ ⊦ A₀ = A₁ type

Γ ⊦ A type
----------
Γ ⊦ a : A

Γ ⊦ Δ tel
---------
Γ ⊦ ē : Δ

Γ ⊦ a₀ : A
Γ ⊦ a₁ : A
---------------
Γ ⊦ a₀ = a₁ : A

Γ ctx
Δ ctx
---------
σ : Γ ⇒ Δ

σ : Γ ⇒ Δ
τ : Γ ⇒ Δ
-------------
σ = τ : Γ ⇒ Δ

Γ ⊦ Δ tel
---------
Γ ⊦ Δ ᐅ 𝒦

Γ ⊦ Δ ᐅ 𝒦
-----------
Γ ⊦ Δ 𝒦 ᐅ 𝒞

Γ ⊦ Δ ᐅ 𝒦
-----------
Γ ⊦ Δ 𝒦 ᐅ 𝒞⁼

Γ ⊦ Δ tel
-----------------
Γ ⊦ Δ ᐅ 𝒜 atype

Γ ⊦ Δ tel
----------------
Γ ⊦ Δ ᐅ ϴ actx

Γ ⊦ Δ ᐅ 𝒜
-----------------
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ ϴ' actx
-----------------
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜̅ : ϴ'

Γ ⊦ Δ ᐅ 𝒦
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------
Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C

Γ ⊦ Δ ᐅ 𝒦
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------
Γ ⊦ Δ ᐅ 𝛆 : 𝒦 → δ.h.C
    Defined as (Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C) and |𝛆| = |𝒦|

///////// Inference rules (ctx) //////////

ε ctx

Γ ctx
Γ ⊦ A type
-------------
Γ (x : A) ctx

///////// Inference rules (tel) //////////

Γ ⊦ ctx
---------
Γ ⊦ ε tel

Γ A ⊦ Δ tel
-----------------
Γ ⊦ (x : A) Δ tel

///////// Inference rules (type) //////////

𝟘 type

𝟙 type

𝕌 type

Γ ⊦ a : 𝕌
--------------
Γ ⊦ El(a) type

Γ ⊦ A type
Γ (x : A) ⊦ B type
------------------
Γ ⊦ Π (x : A) B type

Γ ⊦ A type
Γ (x : A) ⊦ B type
------------------
Γ ⊦ Σ (x : A) B type

Γ ⊦ a₀ : A
Γ ⊦ a₁ : A
----------------------
Γ ⊦ (a₀ ≡ a₁ ∈ A) type

Γ ⊦ A type
σ : Δ ⇒ Γ
-------------
Δ ⊦ A(σ) type

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ I̅ : Δ
------------------
Γ ⊦ Ind Δ 𝒦 I̅ type

/////////// Inference rules (type equality) ////////////

𝟘 = 𝟘 type

𝟙 = 𝟙 type

𝕌 = 𝕌 type

Γ ⊦ El(𝟘) = 𝟘 type

Γ ⊦ El(𝟙) = 𝟙 type

Γ ⊦ a : 𝕌
Γ (x : El(a)) ⊦ b : 𝕌
----------------------------------
Γ ⊦ El(Π (x : a) b) = Π (x : El(a)) El(b) type

Γ ⊦ a : 𝕌
Γ (x : El(a)) ⊦ b : 𝕌
----------------------------------
Γ ⊦ El(Σ (x : a) b) = Σ (x : El(a)) El(b) type

Γ ⊦ t : 𝕌
Γ ⊦ a₀ : El(t)
Γ ⊦ a₁ : El(t)
--------------------------------------------
Γ ⊦ El(a₀ ≡ a₁ ∈ t) = (a₀ ≡ a₁ ∈ El(t)) type

Γ ⊦ A₀ = A₁ type
Γ (x : A₀) ⊦ B₀ = B₁ type
--------------------------------------
Γ ⊦ Π (x : A₀) B₀ = Π (x : A₁) B₁ type

Γ ⊦ A₀ = A₁ type
Γ (x : A₀) ⊦ B₀ = B₁ type
--------------------------------------
Γ ⊦ Σ (x : A₀) B₀ = Σ (x : A₁) B₁ type

Γ ⊦ A = B type
Γ ⊦ a₀ = b₀ : A
Γ ⊦ a₁ = b₁ : A
--------------------------------------
Γ ⊦ (a₀ ≡ a₁ ∈ A) = (b₀ ≡ b₁ ∈ B) type

σ : Δ ⇒ Γ
------------
Δ ⊦ 𝟘(σ) = 𝟘

σ : Δ ⇒ Γ
------------
Δ ⊦ 𝟙(σ) = 𝟙

σ : Δ ⇒ Γ
-----------------------------
Δ ⊦ (Π A B)(σ) = Π A(σ) B(σ⁺)

σ : Δ ⇒ Γ
-----------------------------
Δ ⊦ (Σ A B)(σ) = Σ A(σ) B(σ⁺)

σ : Δ ⇒ Γ
---------------------------------------------
Δ ⊦ (a₀ ≡ a₁ ∈ A)(σ) = (a₀(σ) ≡ a₁(σ) ∈ A(σ))

σ : Δ ⇒ Γ
τ : Ξ ⇒ Δ
...........................
Ξ ⊦ A(σ)(τ) = A(σ ∘ τ) type

///////// Inference rules (elem) //////////

Γ ⊦ t : 𝟘
----------------
Γ ⊦ 𝟘-elim t : A

Γ ⊦ () : 𝟙

Γ ⊦ 𝟘 : 𝕌

Γ ⊦ 𝟙 : 𝕌

Γ ⊦ A : 𝕌
Γ El(A) ⊦ B : 𝕌
---------------
Γ ⊦ Π A B : 𝕌

Γ ⊦ A : 𝕌
Γ El(A) ⊦ B : 𝕌
---------------
Γ ⊦ Σ A B : 𝕌

Γ ⊦ t : 𝕌
Γ ⊦ a₀ : El(t)
Γ ⊦ a₁ : El(t)
---------------------
Γ ⊦ (a₀ ≡ a₁ ∈ t) : 𝕌

Γ A ⊦ f : B
--------------
Γ ⊦ λf : Π A B

Γ ⊦ f : Π A B
Γ ⊦ e : A
------------------
Γ ⊦ f e : B(id, e)

Γ A ⊦ B type
Γ ⊦ a : A
Γ ⊦ b : B(id, a)
------------------
Γ ⊦ (a, b) : Σ A B

Γ ⊦ t : Σ A B
-------------
Γ ⊦ t.π₁ : A

Γ ⊦ t : Σ A B
----------------------
Γ ⊦ t.π₂ : B(id, t.π₁)

Γ ⊦ a₀ : A
Γ ⊦ a₁ : A
-------------------
Γ ⊦ a₀ ≡(A) a₁ type

Γ ⊦ a : A
----------------------
Γ ⊦ Refl : (a ≡ a ∈ A)

Γ A ⊦ x₀ : A(↑)

Γ ⊦ xᵢ : T
-----------------
Γ A ⊦ xᵢ₊₁ : T(↑)

Γ ⊦ t : A
σ : Δ ⇒ Γ
---------------
Δ ⊦ t(σ) : A(σ)

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ 𝒦[ℓ] = (Ξ, ϴ, γ.I̅)
Γ ⊦ ē₀ : Ξ
Γ ⊦ ē₁ : ⦃ϴ⦄(δ. Ind Δ δ)
-----------------------------------------
Γ ⊦ Intro ℓ Δ 𝒦 ē₀ ē₁ : Ind Δ 𝒦 I̅(ē₀/γ)

Γ ⊦ Δ ᐅ 𝒦
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Γ ⊦ I̅ : Δ
Γ ⊦ t : Ind Δ 𝒦 I̅
Γ ⊦ Δ ᐅ 𝛆 : 𝒦 → δ.h.C
--------------------------------------
Γ ⊦ Elim Δ 𝒦 δ.h.C I̅ t 𝛆 : C(I̅/δ, t/h)

///////// Inference rules (elem equality) //////////

Γ ⊦ t : 𝟙
--------------
Γ ⊦ t = () : 𝟙

Γ A ⊦ f : B
Γ ⊦ e : A
---------------------------------
Γ ⊦ (λ f) e = f(id, e) : B(id, e)

Γ ⊦ f : Π A B
------------------------
Γ ⊦ λ (f x₀) = f : Π A B

Γ A ⊦ B type
Γ ⊦ a : A
Γ ⊦ b : B(id, a)
---------------------
Γ ⊦ (a, b).π₁ = a : A

Γ A ⊦ B type
Γ ⊦ a : A
Γ ⊦ b : B(id, a)
----------------------------
Γ ⊦ (a, b).π₂ = b : B(id, a)

Γ ⊦ t : Σ A B
----------------------------
Γ ⊦ (t.π₁, t.π₂) = t : Σ A B

Γ ⊦ e : (a₀ ≡ a₁ ∈ A)
---------------------
Γ ⊦ a₀ = a₁ : A

Γ ⊦ e : (a₀ ≡ a₁ ∈ A)
----------------------------
Γ ⊦ e = Refl : (a₀ ≡ a₀ ∈ A)

Γ ⊦ A ctx
σ : Δ ⇒ Γ
Δ ⊦ t : A(σ)
-----------------------
Δ ⊦ x₀(σ, t) = t : A(σ)

Γ ⊦ xᵢ : B
-------------------------
Γ A ⊦ xᵢ(↑) = xᵢ₊₁ : B(↑)

σ : Δ ⇒ Γ
τ : Ξ ⇒ Δ
Γ ⊦ A type
---------------------------------
Ξ ⊦ t(σ)(τ) = t(σ ∘ τ) : A(σ ∘ τ)

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜₀, ξ.θ.𝓜₁)
Γ ⊦ ē : Ξ
Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ(ē)⦄
----------------------------------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝓜₀(ē)⦄(t̄) = Δ 𝒦 ᐅ ⦃θ.𝓜₁(ē)⦄(t̄) : Ind Δ 𝒦 I̅(ē)

Γ ⊦ Δ ᐅ 𝒦
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Γ ⊦ I̅ : Δ
Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅₀)
Γ ⊦ ē : Ξ
Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ(ē)⦄
//By typing: Γ ⊦ I̅₀(ē) = I̅ : Δ
//By typing: Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦ 𝛆[ℓ] : C(I̅₀, Intro ℓ Δ 𝒦 ξ η)
--------------------------------------------------------------------------------------------------------
Γ ⊦ Elim Δ 𝒦 δ.h.C I̅ (Intro ℓ Δ 𝒦 ē t̄) 𝛆 = 𝛆[ℓ](ē, t̄, Δ 𝒦 ᐅ act(δ.h.C, ϴ(ē), t̄)) : C(I̅, Intro ℓ Δ 𝒦 ē t̄)

///////// Inference rules (substitution) //////////

Γ ctx
---------
· : Γ ⇒ ε

Γ ctx
----------
id : Γ ⇒ Γ

Γ A ctx
-----------
↑ : Γ A ⇒ Γ

σ : Δ ⇒ Γ
τ : Ξ ⇒ Δ
-------------
σ ∘ τ : Ξ ⇒ Γ

σ : Δ ⇒ Γ
Γ ⊦ A type
Δ ⊦ t : A(σ)
--------------
σ, t : Δ ⇒ Γ A

///////// Inference rules (substitution equality) //////////

Γ ctx
σ : Γ ⇒ ε
-------------
σ = · : Γ ⇒ ε

σ : Γ ⇒ Δ
------------------
σ ∘ id = σ : Γ ⇒ Δ

σ : Γ ⇒ Δ
------------------
id ∘ σ = σ : Γ ⇒ Δ

σ₁₀ : Γ₁ ⇒ Γ₀
σ₂₁ : Γ₂ ⇒ Γ₁
σ₃₂ : Γ₃ ⇒ Γ₂
-----------------------------------------------
σ₁₀ ∘ (σ₂₁ ∘ σ₃₂) = (σ₁₀ ∘ σ₂₁) ∘ σ₃₂ : Γ₃ ⇒ Γ₀

σ : Δ ⇒ Γ
Γ ⊦ A type
Δ ⊦ t : A(σ)
----------------------
↑ ∘ (σ, t) = σ : Δ ⇒ Γ

τ : Γ₀ ⇒ Γ₁
σ : Γ₁ ⇒ Γ₂
Γ₂ ⊦ A type
Γ₁ ⊦ t : A(σ)
--------------------------------------
(σ, t) ∘ τ = (σ ∘ τ, t(τ)) : Γ₀ ⇒ Γ₂ A

///////// Inference rules (inductive schema) //////////

Γ ⊦ Δ ᐅ ε

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ 𝒦 ᐅ 𝒞
------------------
Γ ⊦ Δ ᐅ (𝒦, ℓ : 𝒞)

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ 𝒦 ᐅ 𝒞⁼
------------------
Γ ⊦ Δ ᐅ (𝒦, ℓ : 𝒞⁼)

///////// Inference rules (inductive point-constructor) //////////

Γ ⊦ Ξ tel
Γ Ξ ⊦ Δ ᐅ ϴ
Γ Ξ ⊦ ē : Δ
-------------------
Γ ⊦ Δ 𝒦 ᐅ (Ξ, ϴ, ē)

///////// Inference rules (inductive equality-constructor) //////////

Γ ⊦ Ξ tel
Γ Ξ ⊦ Δ ᐅ ϴ actx
Γ Ξ ⊦ ē : Δ
Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒳(ē)
Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝒩 : 𝒳(ē)
------------------------------
Γ ⊦ Δ 𝒦 ᐅ (Ξ, ϴ, ē, 𝓜, 𝒩)

///////// Inference rules (actx) //////////

Γ ⊦ Δ ᐅ ε actx

Γ ⊦ Δ ᐅ ϴ actx
Γ ⊦ Δ ᐅ 𝒜 atype
------------------
Γ ⊦ Δ ᐅ ϴ 𝒜 actx

///////// Inference rules (atype) //////////

Γ ⊦ A type
Γ A ⊦ Δ ᐅ 𝓑 atype
---------------------
Γ ⊦ Δ ᐅ Π A 𝓑 atype

Γ ⊦ ē : Δ
---------------------
Γ ⊦ Δ ᐅ 𝒳(ē) atype

///////// Inference rules (aelem) //////////


Γ A ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝓑
----------------------
Γ ϴ ⊦ Δ 𝒦 ᐅ λ𝓜 : Π A 𝓑

Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : Π A 𝓑
Γ ⊦ e : A
--------------------------
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 e : 𝓑(id, e)

Γ ⊦ 𝒦[ℓ] = (Ξ, ϴ', I̅)
Γ ⊦ ē : Ξ
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝒩̅ : ϴ'
------------------------------------
Γ ϴ ⊦ Δ 𝒦 ᐅ Intro ℓ ē 𝒩̅ : 𝒳 I̅(id, ē)

Γ ϴ 𝒜 ⊦ Δ 𝒦 ᐅ x₀ : 𝒜

Γ ϴ ⊦ Δ 𝒦 ᐅ xᵢ : 𝓑
----------------------
Γ ϴ 𝒜 ⊦ Δ 𝒦 ᐅ xᵢ₊₁ : 𝓑

///////// Inference rules (elimination) //////////

Γ ⊦ Δ ᐅ ε : 𝒦 ⇀ δ.h.C

Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C
Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅)
Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦ e : C(I̅/δ, Intro ℓ Δ 𝒦 ξ η/h)
-----------------------------------------------------------------------------------
Γ ⊦ Δ ᐅ 𝛆, ℓ : ξ.η.ρ.e : 𝒦 ⇀ δ.h.C

Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C
Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜₀, ξ.θ.𝓜₁)
Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦
   (Δ 𝒦 ᐅ ⦇θ.𝓜₀⦈(δ.h.C, η, ρ, 𝛆)) = (Δ 𝒦 ᐅ ⦇θ.𝓜₁⦈(δ.h.C, η, ρ, 𝛆)) : C(I̅, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
//Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝓜₀ : 𝒳(I̅)
//Δ 𝒦 ᐅ ⦇𝒳(I̅)⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
//  =
//C(I̅, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
-----------------------------------------------------------------------
Γ ⊦ Δ ᐅ 𝛆, ℓ : ξ.η.ρ.e : 𝒦 ⇀ δ.h.C


///////// Interpretations //////////

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ 𝒜 atype
-------------------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦃𝒜⦄ type
    Δ 𝒦 ᐅ ⦃Π (x : A) 𝓑⦄ = Π (x : A) (Δ 𝒦 ᐅ ⦃𝓑⦄)
    Δ 𝒦 ᐅ ⦃𝒳(I̅)⦄ = Ind Δ 𝒦 I̅

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ ϴ ctx
-----------------
Γ ⊦ Δ 𝒦 ᐅ ⦃ϴ⦄ tel
    Δ 𝒦 ᐅ ⦃ε⦄ = ε
    Δ 𝒦 ᐅ ⦃ϴ 𝒜⦄ = (Δ 𝒦 ᐅ ⦃ϴ⦄) (Δ 𝒦 ᐅ ⦃𝒜⦄)

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ 𝒜 atype
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜
Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē) : Δ 𝒦 ᐅ ⦃𝒜⦄
    Δ 𝒦 ᐅ ⦃θ. λx.f⦄(ē) = λx. Δ 𝒦 ᐅ ⦃θ.f⦄(ē) : Π (x : A) (Δ 𝒦 ᐅ ⦃𝓑⦄)
    Δ 𝒦 ᐅ ⦃θ. 𝓜 e⦄(ē) = (Δ 𝒦 ᐅ ⦃θ. 𝓜⦄(ē)) e : 𝓑
    //𝒦[ℓ] = (Ξ, ϴ', ξ.I̅)
    Δ 𝒦 ᐅ ⦃θ. Intro ℓ ē₀ 𝒩̅⦄(ē) = Intro ℓ Δ 𝒦 ē₀ (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē)) : Ind Δ 𝒦 I̅(ē₀/ξ)
    //ϴ = ϴ₀ 𝒜 ϴ₁
    Δ 𝒦 ᐅ ⦃θ. xᵢ⦄(ē₀, eᵢ, ē₁) = eᵢ : Δ 𝒦 ᐅ ⦃𝒜⦄

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ ϴ' actx
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝒩̅ : ϴ'
Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
-------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē) : Δ 𝒦 ᐅ ⦃ϴ'⦄
    Δ 𝒦 ᐅ ⦃θ.·⦄(ē) : ε
    Δ 𝒦 ᐅ ⦃θ.𝒩̅ 𝒩⦄(ē) = (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē)) (Δ 𝒦 ᐅ ⦃θ.𝒩⦄(ē)) : (Δ 𝒦 ᐅ ⦃ϴ'⦄) (Δ 𝒦 ᐅ ⦃𝒜⦄)


Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ 𝒜 atype
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Γ ⊦ e : Δ 𝒦 ᐅ ⦃𝒜⦄
----------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e) type
    Δ 𝒦 ᐅ ⦇𝒳(ē)⦈(δ.h.C, e) = C(ē/δ, e)
    Δ 𝒦 ᐅ ⦇Π (x : A) 𝓑⦈(δ.h.C, e) = Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, e x))

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ ϴ actx
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
----------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē) tel
    Δ 𝒦 ᐅ ⦇ε⦈(δ.h.C, ē) = ε
    Δ 𝒦 ᐅ ⦇ϴ 𝒜⦈(δ.h.C, (ē, e)) = (Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē)) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e))

Γ ⊦ Δ ᐅ 𝒜 atype
Γ ⊦ Δ ᐅ ϴ actx
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜
Γ ⊦ ē₀ : Δ 𝒦 ᐅ ⦃ϴ⦄
Γ ⊦ ē₁ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē₀)
Γ ⊦ 𝛆 : 𝒦 → δ.h.C
-------------------------------------------------------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀))
    //𝒜 = Π (x : A) 𝓑
    Δ 𝒦 ᐅ ⦇θ.λx.f⦈(δ.h.C, ē₀, ē₁, 𝛆) = λx. Δ 𝒦 ᐅ ⦇θ.f⦈(δ.h.C, e₀, e₁, 𝛆) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.f⦄(ē₀)))
    //𝓜 : Π (x : A) 𝓑
    //We have: 𝓑(a/x) = 𝒜
    //Expected type: Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜 a⦄(ē₀))
    //                   =
    //               Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜 a⦄(ē₀))
    //                   =
    //               Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) a)
    //⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) x))
    //Got type: Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) a)
    Δ 𝒦 ᐅ ⦇θ.𝓜 a⦈(δ.h.C, ē₀, ē₁, 𝛆) = ⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) a

    //𝒦[ℓ] = (Ξ, ϴ', ξ.I̅')
    //ē : Ξ
    //𝒩̅ : ϴ'
    //𝛆[ℓ] = γ.η.ρ.e :
    //Expected type: ⦇𝒳(I̅'(ē/ξ))⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.Intro ℓ ē 𝒩̅⦄(ē₀))
                        =
                     ⦇𝒳(I̅'(ē/ξ))⦈(δ.h.C, Intro ℓ Δ 𝒦 ē (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))
                        =
                     C(I̅'(ē/ξ), Intro ℓ Δ 𝒦 ē (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))
    Δ 𝒦 ᐅ ⦇θ.Intro ℓ ē 𝒩̅⦈(δ.h.C, ē₀, ē₁, 𝛆)
           =
         e(ē, Δ 𝒦 ᐅ ⦃𝒩̅⦄(ē₀) : Δ 𝒦 ᐅ ⦃ϴ'⦄, ⦇θ.𝒩̅⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))

    //ē₀ = ē₀₀ e₀ᵢ ē₀₁
    //ē₁ = ē₁₀ e₁ᵢ ē₁₁
    //e₁ᵢ : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e₀ᵢ)
    //ϴ = ϴ₀ 𝒜 ϴ₁
    //Expected type:
    //Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e₀ᵢ)
    Δ 𝒦 ᐅ ⦇θ.xᵢ⦈(δ.h.C, ē₀, ē₁, 𝛆) = e₁ᵢ


Γ ⊦ Δ ᐅ ϴ' actx
Γ ⊦ Δ ᐅ ϴ actx
Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜̅ : ϴ'
Γ ⊦ ē₀ : Δ 𝒦 ᐅ ⦃ϴ⦄
Γ ⊦ ē₁ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē₀)
Γ ⊦ 𝛆 : 𝒦 → δ.h.C
-------------------------------------------------------------------------------
Γ ⊦ Δ 𝒦 ᐅ ⦇θ.𝓜̅⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜̅⦄(ē₀))
    Δ 𝒦 ᐅ ⦇θ.·⦈(δ.h.C, ē₀, ē₁, 𝛆) = · : ε
    Δ 𝒦 ᐅ ⦇θ.𝓜̅ 𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆)
      =
    (⦇θ.𝓜̅⦈(δ.h.C, ē₀, ē₁, 𝛆)) (⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆)) : (Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜̅⦄(ē₀))) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)))

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ 𝒜 actx
Γ ⊦ t : Δ 𝒦 ᐅ ⦃𝒜⦄
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------
Γ ⊦ Δ 𝒦 ᐅ act(δ.h.C, 𝒜, t) : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, t)
    Δ 𝒦 ᐅ act(δ.h.C, Π (x : A) 𝓑, t) = λx. Δ 𝒦 ᐅ act(𝓑, t x) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, t x))
    Δ 𝒦 ᐅ act(δ.h.C, 𝒳(I̅), t) = Elim Δ 𝒦 δ.h.C I̅ t : C(I̅, t)

Γ ⊦ Δ ᐅ 𝒦
Γ ⊦ Δ ᐅ ϴ actx
Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ⦄
Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------
Γ ⊦ Δ 𝒦 ᐅ act(δ.h.C, ϴ, t̄) : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, t̄)
    Δ 𝒦 ᐅ act(δ.h.C, ε, ·) = · : ε
    Δ 𝒦 ᐅ act(δ.h.C, ϴ 𝒜, t̄ t) = (Δ 𝒦 ᐅ act(δ.h.C, ϴ, t̄)) (Δ 𝒦 ᐅ act(δ.h.C, 𝒜, t)) : (Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, t̄)) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, t))

