
|·| : List A → ℕ
|[]| = 0
|x :: xs| = 1 + |xs|


List : (A → B) → (List A → List B)
List f [] = []
List f (x :: xs) = f x :: List f xs

well-foundedH : (P : List A → 𝕌)
                ((xs : List A) → ((ys : List A) → |ys| < |xs| → P ys) → P xs)
                (xs ys : List A)
                →
                |ys| < |xs| → P ys
well-foundedH P f [] ys contra = //
// |xs| = |ys|
//f ys : ((ys₀ : List A) → |ys₀| < |ys| → P ys₀) → P ys
//well-foundedH P f ys
well-foundedH P f (x :: xs) ys Here = f ys (well-foundedH P f ys) : P ys
//p : |ys| < |xs|
well-foundedH P f (x :: xs) ys (There p) = well-foundedH P f xs ys p

well-founded : (P : List A → 𝕌) ((xs : List A) → ((ys : List A) → |ys| < |xs| → P ys) → P xs) → (xs : List A) → P xs
well-founded P f [] = f [] (_ : (ys : List A) → |ys| < 0 → P ys ≅ (ys : List A) → 𝟘 → P ys ≅ 𝟙)
well-founded P f (x :: xs) = f (x :: xs) (well-foundedH P f (x :: xs) : P (x :: xs)
  f xs : ((ys : List A) → |ys| < |xs| → P ys) → P xs
  f (x :: xs) (well-foundedH P f (x :: xs) : P (x :: xs)

  well-foundedH P f (x :: xs) : (ys : List A) → |ys| < 1 + |xs| → P ys
