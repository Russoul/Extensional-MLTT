
data ℤ : 𝕌 where
  (x : ℕ) ⊦ -x : ℤ
  (x : ℕ) ⊦ +x : ℤ

(~) : ℤ → ℤ → Type
(-x ~ -y) = (x ~ y)
(+x ~ +y) = (x ~ y)
(-x ~ +y) = (x ~ 0) ⨯ (y ~ 0)
(+x ~ -y) = (x ~ 0) ⨯ (y ~ 0)

(x : ℤ) ⊦ x ~ x
(+x ~ +x) ≔ x
(-x ~ -x) ≔ x

(x y : ℤ) (p : x ~ y) ⊦ p⁻¹ : y ~ x
(x y : ℕ) (p : x ~ y) ⊦ p⁻¹ ≔ p⁻¹ : y ~ x
(x y : ℕ) (p : x ~ y) ⊦ p⁻¹ ≔ p⁻¹ : y ~ x
(x y : ℕ) ((p, q) : (x ~ 0) ⨯ (y ~ 0)) ⊦ p⁻¹ ≔ (q, p) : (y ~ 0) ⨯ (x ~ 0)
(x y : ℕ) ((p, q) : (x ~ 0) ⨯ (y ~ 0)) ⊦ p⁻¹ ≔ (q, p) : (y ~ 0) ⨯ (x ~ 0)


(x y z : ℤ) (p : x ~ y) (q : y ~ z) ⊦ (p ∙ q)(x, y, z) : x ~ z
(x y z : ℕ) (p : x ~ y) (q : y ~ z) ⊦ (p ∙ q)(-x, -y, -z) ≔ (p ∙ q)(x, y, z) : x ~ z
(x y z : ℕ) (p : x ~ y) ((q₀, q₁) : (y ~ 0) ⨯ (z ~ 0)) ⊦ (p ∙ q)(-x, -y, +z) ≔ (p ∙ q₀, q₁)  : (x ~ 0) ⨯ (z ~ 0)
(x y z : ℕ) (p : -x ~ +y) (q : +y ~ -z) ⊦ (p ∙ q)(-x, +y, -z) : -x ~ -z
(x y z : ℕ) (p : -x ~ +y) (q : +y ~ +z) ⊦ (p ∙ q)(-x, +y, +z) : -x ~ +z
(x y z : ℕ) (p : +x ~ -y) (q : -y ~ -z) ⊦ (p ∙ q)(+x, -y, -z) : +x ~ -z
(x y z : ℕ) (p : +x ~ -y) (q : -y ~ +z) ⊦ (p ∙ q)(+x, -y, +z) : +x ~ +z
(x y z : ℕ) (p : +x ~ +y) (q : +y ~ -z) ⊦ (p ∙ q)(+x, +y, -z) : +x ~ -z
(x y z : ℕ) (p : +x ~ +y) (q : +y ~ +z) ⊦ (p ∙ q)(+x, +y, +z) : +x ~ +z

//Hence ~ℤ is an equivalence relation

// (ℤ, ~ℤ) is a setoid

abs : ℤ → ℕ
abs (+x) = x
abs (-x) = x

(x y : ℤ) (p : x ~ y) ⊦ ~abs(x, y, p) : abs x ~ abs y
(x y : ℕ) (p : x ~ y) ⊦ ~abs(+x, +y, p) ≔ p : x ~ y
(x y : ℕ) (p : x ~ y) ⊦ ~abs(-x, -y, p) ≔ p : x ~ y
(x y : ℕ) ((p, q) : (x ~ 0) ⨯ (y ~ 0)) ⊦ ~abs(+x, -y, p) ≔ p ∙ q⁻¹ : x ~ y
(x y : ℕ) ((p, q) : (x ~ 0) ⨯ (y ~ 0)) ⊦ ~abs(-x, +y, p) ≔ p ∙ q⁻¹ : x ~ y


f g : (𝕌, ~) ⇒ (𝕌, ~)
f.U : 𝕌 → 𝕌

(f ~ g) ≔ (f ~ g)
